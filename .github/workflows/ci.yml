name: CI Pipeline

# When to run the workflow: push events, pull requests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test_lint_build:
    name: Test, Lint, Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]  # Using Node.js 20.x like in the first workflow
    env:
      BE_URL: http://localhost:6900

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Install pnpm for better performance
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.1.1
          run_install: false

      # Step 4: Cache pnpm store to improve build times
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      # Step 5: Cache node_modules to avoid reinstallation on every run
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules/
          key: ${{ runner.os }}-node-modules-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-node-modules-

      # Step 6: Install dependencies using pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 7: Run Linting, Type Checking, and Unit Tests
      - name: Run Linting, Type Checking, and Unit Tests
        run: |
          pnpm run lint         # Lint the code
          pnpm run check-types  # Check TypeScript types
          pnpm run test -- --ci --coverage  # Run unit tests

      # Step 8: Build the project
      - name: Build the project
        run: pnpm run build

  # Job 2: Security audit for vulnerabilities
  security_audit:
    name: Run Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Security Audit (npm audit)
        run: pnpm audit --audit-level=high

  # Job 3: Enforce code formatting with Prettier
  enforce_formatting:
    name: Enforce Code Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Check Code Formatting (Prettier)
        run: pnpm run format:check

  # Job 4: Prevent force-pushes to the main branch
  no_force_push:
    name: Prevent Force Push
    runs-on: ubuntu-latest
    steps:
      - name: Ensure No Force Push on Main
        run: |
          git fetch
          git rev-list HEAD..origin/main --count
          if [[ $(git rev-list HEAD..origin/main --count) -ne 0 ]]; then
            echo "Force pushes detected! Preventing the action."
            exit 1
          fi
        shell: bash
